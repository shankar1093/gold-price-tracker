version: '3.8'
services:
  db:
    image: postgres:14
    environment:
      - POSTGRES_DB=mjw
      - POSTGRES_USER=rate_service
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./db/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rate_service -d mjw"]
      interval: 5s
      timeout: 5s
      retries: 5

  rust_backend:
    build:
      context: backend/gold_price_service
      dockerfile: Dockerfile
    environment:
      RUST_LOG: "info"
    ports:
      - "8080:8080"
    restart: "always"
    working_dir: /usr/src/app
    volumes:
      - ./backend/gold_price_service/target:/usr/src/app/target
    command: ["/usr/local/bin/gold_price_service"]
    networks:
      - app-network
    depends_on:
      - db

  python-backend:
    build: ./backend/mjw_services
    environment:
      DATABASE_URL: postgres://rate_service:${DB_PASSWORD}@db:5432/mjw
      POSTGRES_USER: rate_service
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: mjw
    ports:
      - "8000:8000"
    restart: "always"
    working_dir: /usr/src/app
    volumes:
      - ./backend/mjw_services:/usr/src/app
      - ./backend/mjw_services/wait-for-it.sh:/usr/src/app/wait-for-it.sh
      - ./backend/mjw_services/entrypoint.sh:/usr/src/app/entrypoint.sh
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    entrypoint: ["/usr/src/app/entrypoint.sh"]
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]

  frontend:
    build:
      context: frontend/
      dockerfile: Dockerfile
    environment:
      NODE_ENV: "production"
      HOSTNAME: "0.0.0.0"
      BACKEND_URL: "http://python-backend:8080"
    ports:
      - "3000:3000"
    restart: "always"
    working_dir: /app
    volumes:
      # - ./frontend/:/app
      - /app/node_modules
    command: ["node", "server.js"]
    networks:
      - app-network



networks:
  app-network:
    name: app-network
    driver: bridge

volumes:
  postgres_data: